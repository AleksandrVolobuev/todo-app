// –ü–µ—Ä–µ–≤–æ–¥—ã
const translations = {
  uk: {
    title: "–ú–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è",
    day: "–î–µ–Ω—å",
    week: "–¢–∏–∂–¥–µ–Ω—å",
    month: "–ú—ñ—Å—è—Ü—å",
    add: "+ –î–æ–¥–∞—Ç–∏",
    add_task: "–î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è",
    edit_task: "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è",
    save: "–ó–±–µ—Ä–µ–≥—Ç–∏",
    cancel: "–°–∫–∞—Å—É–≤–∞—Ç–∏",
    exit: "–í–∏–π—Ç–∏",
    enter_task: "–í–≤–µ–¥—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è...",
    confirm_delete: "–í–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è?",
    empty_task: "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è",
    confirm_exit: "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–π—Ç–∏?"
  },
  ru: {
    title: "–ú–æ–∏ –∑–∞–¥–∞—á–∏",
    day: "–î–µ–Ω—å",
    week: "–ù–µ–¥–µ–ª—è",
    month: "–ú–µ—Å—è—Ü",
    add: "+ –î–æ–±–∞–≤–∏—Ç—å",
    add_task: "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É",
    edit_task: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É",
    save: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
    cancel: "–û—Ç–º–µ–Ω–∞",
    exit: "–í—ã–π—Ç–∏",
    enter_task: "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É...",
    confirm_delete: "–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?",
    empty_task: "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏",
    confirm_exit: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?"
  },
  en: {
    title: "My Tasks",
    day: "Day",
    week: "Week",
    month: "Month",
    add: "+ Add",
    add_task: "Add task",
    edit_task: "Edit task",
    save: "Save",
    cancel: "Cancel",
    exit: "Exit",
    enter_task: "Enter task...",
    confirm_delete: "Delete this task?",
    empty_task: "Enter task text",
    confirm_exit: "Are you sure you want to exit?"
  }
};

// –¢–µ–∫—É—â–∏–π —è–∑—ã–∫
let currentLang = 'uk';

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
function t(key) {
  return translations[currentLang][key] || key;
}

// –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
function applyTranslations() {
  document.querySelectorAll('[data-i18n]').forEach(el => {
    const key = el.getAttribute('data-i18n');
    el.textContent = t(key);
  });
  
  document.querySelectorAll('[data-i18n-placeholder]').forEach(el => {
    const key = el.getAttribute('data-i18n-placeholder');
    el.placeholder = t(key);
  });
  
  document.documentElement.lang = currentLang;
}

// –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
function setLanguage(lang) {
  currentLang = lang;
  localStorage.setItem('language', lang);
  applyTranslations();
  
  // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É —è–∑—ã–∫–∞
  document.querySelectorAll('.lang-btn').forEach(btn => {
    btn.classList.toggle('active', btn.dataset.lang === lang);
  });
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let tasks = { day: [], week: [], month: [] };
let currentPeriod = '';
let editingIndex = -1;

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const modal = document.getElementById('modal');
const modalTitle = document.getElementById('modal-title');
const taskInput = document.getElementById('task-input');
const taskDate = document.getElementById('task-date');
const modalSave = document.getElementById('modal-save');
const modalCancel = document.getElementById('modal-cancel');

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async function loadTasks() {
  try {
    const loadedTasks = await window.electronAPI.loadTasks();
    tasks = loadedTasks;
    renderTasks('day');
    renderTasks('week');
    renderTasks('month');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
async function saveTasks() {
  try {
    await window.electronAPI.saveTasks(tasks);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(dateString) {
  if (!dateString) return '';
  const date = new Date(dateString);
  const options = { day: 'numeric', month: 'short', year: 'numeric' };
  return date.toLocaleDateString(currentLang, options);
}

// –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
function renderTasks(period) {
  const container = document.getElementById(`${period}-tasks`);
  if (!container) return;

  container.innerHTML = '';
  
  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
  const sortedTasks = [...tasks[period]].sort((a, b) => {
    if (!a.date) return 1;
    if (!b.date) return -1;
    return new Date(a.date) - new Date(b.date);
  });
  
  sortedTasks.forEach((task, index) => {
    const originalIndex = tasks[period].indexOf(task);
    const taskDiv = document.createElement('div');
    taskDiv.className = 'task-item';
    
    // –ß–µ–∫–±–æ–∫—Å
    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.checked = task.completed || false;
    checkbox.addEventListener('change', () => toggleTask(period, originalIndex));
    
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ –¥–∞—Ç—ã
    const textContainer = document.createElement('div');
    textContainer.className = 'task-text-container';
    
    const text = document.createElement('span');
    text.textContent = task.text;
    text.className = task.completed ? 'completed' : '';
    
    textContainer.appendChild(text);
    
    // –î–∞—Ç–∞
    if (task.date) {
      const dateSpan = document.createElement('span');
      dateSpan.className = 'task-date';
      dateSpan.textContent = formatDate(task.date);
      textContainer.appendChild(dateSpan);
    }
    
    // –ö–Ω–æ–ø–∫–∏
    const btnEdit = document.createElement('button');
    btnEdit.textContent = '‚úèÔ∏è';
    btnEdit.className = 'btn-edit';
    btnEdit.addEventListener('click', () => editTask(period, originalIndex));
    
    const btnDelete = document.createElement('button');
    btnDelete.textContent = 'üóëÔ∏è';
    btnDelete.className = 'btn-delete';
    btnDelete.addEventListener('click', () => removeTask(period, originalIndex));
    
    taskDiv.appendChild(checkbox);
    taskDiv.appendChild(textContainer);
    taskDiv.appendChild(btnEdit);
    taskDiv.appendChild(btnDelete);
    
    container.appendChild(taskDiv);
  });
}

// –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
function addTask(period) {
  currentPeriod = period;
  editingIndex = -1;
  modalTitle.textContent = t('add_task');
  taskInput.value = '';
  taskDate.value = '';
  modal.style.display = 'flex';
  taskInput.focus();
}

// –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function editTask(period, index) {
  currentPeriod = period;
  editingIndex = index;
  modalTitle.textContent = t('edit_task');
  taskInput.value = tasks[period][index].text;
  taskDate.value = tasks[period][index].date || '';
  modal.style.display = 'flex';
  taskInput.focus();
}

// –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
function removeTask(period, index) {
  if (confirm(t('confirm_delete'))) {
    tasks[period].splice(index, 1);
    renderTasks(period);
    saveTasks();
  }
}

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
function toggleTask(period, index) {
  tasks[period][index].completed = !tasks[period][index].completed;
  renderTasks(period);
  saveTasks();
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É (–¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)
function saveTask() {
  const text = taskInput.value.trim();
  if (!text) {
    alert(t('empty_task'));
    return;
  }
  
  const taskData = {
    text,
    completed: false,
    date: taskDate.value || null
  };
  
  if (editingIndex === -1) {
    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é
    tasks[currentPeriod].push(taskData);
  } else {
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
    tasks[currentPeriod][editingIndex].text = text;
    tasks[currentPeriod][editingIndex].date = taskDate.value || null;
  }
  
  renderTasks(currentPeriod);
  saveTasks();
  closeModal();
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function closeModal() {
  modal.style.display = 'none';
  taskInput.value = '';
  taskDate.value = '';
  currentPeriod = '';
  editingIndex = -1;
}

// –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function exitApp() {
  if (confirm(t('confirm_exit'))) {
    window.electronAPI.exitApp();
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
  // –ó–∞–≥—Ä—É–∑–∏—Ç—å —è–∑—ã–∫ –∏–∑ localStorage
  const savedLang = localStorage.getItem('language') || 'uk';
  setLanguage(savedLang);
  
  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
  const tabs = document.querySelectorAll('.tab');
  const contents = document.querySelectorAll('.tab-content');

  tabs.forEach(tab => {
    tab.addEventListener('click', () => {
      tabs.forEach(t => t.classList.remove('active'));
      tab.classList.add('active');

      contents.forEach(c => c.style.display = 'none');
      const targetId = tab.dataset.tab;
      const targetContent = document.getElementById(targetId);
      if (targetContent) {
        targetContent.style.display = 'block';
      }
    });
  });

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤
  document.querySelectorAll('.lang-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      setLanguage(btn.dataset.lang);
    });
  });

  // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
  document.getElementById('exit-btn').addEventListener('click', exitApp);

  // –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  document.getElementById('day-add').addEventListener('click', () => addTask('day'));
  document.getElementById('week-add').addEventListener('click', () => addTask('week'));
  document.getElementById('month-add').addEventListener('click', () => addTask('month'));

  // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  modalSave.addEventListener('click', saveTask);
  modalCancel.addEventListener('click', closeModal);
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Enter
  taskInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      saveTask();
    }
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && modal.style.display === 'flex') {
      closeModal();
    }
  });

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏
  loadTasks();
});